/***************************
****************************
****************************
*****选择排序*************/

void selectionSort( int arr[], int n)
{
	for(int i = 0; i<n; i ++;)
	{
	
	//寻找[i,n)区间里的最小值
		int minIndex = i;
		for(int j = i +1; j< n; j++)
		{
			if(arr[j] < arr[minIndex])
				minIndex = j;
		}
		//找出的最小值与当前的i位置交换
		swap( arr[i], arr[minIndex]);
	}
}


/****************************
*****************************
*****************************
********插入排序************
*****************************/  (交换)

void insertionSort(int arr[], int n){
	for( int i = 1; i < n; i ++){
	//寻找元素arr[i]合适的插入位置
		for( int j = i; j >0; j--){		//for(int j = i; j>0 && arr[j] < arr[j-1] ;j--)  swap(arr[j], arr[j-1]);
			if(arr[j] < arr[j-1])  
				swap(arr[j], arr[j-1]);		
			else
				break;
		}
	}
}


/****************************
*****************************
*****************************
********插入排序（优化）************
*****************************/  (赋值)

void insertionSort(int arr[], int n){
	for( int i = 1; i < n; i ++){
		int arrIndex = arr[i];
		for( int j = i; j >0; j--){		
			if(arrIndex < arr[j-1])  
				arr[j] = arr[j-1];		
			else
				arr[j] = arrIndex;
		}
	}
}

